# Урок 12. ООП. Финал
# Создайте класс студента.
# * Используя дескрипторы проверяйте ФИО на первую заглавную букву и наличие только букв.
# * Названия предметов должны загружаться из файла CSV при создании экземпляра. 
#            Другие предметы в экземпляре недопустимы.
# * Для каждого предмета можно хранить оценки (от 2 до 5) и результаты тестов (от 0 до 100).
# * Также экземпляр должен сообщать средний балл по тестам для каждого предмета и по оценкам всех предметов вместе взятых.


# Порядок решения
# Как в классе храним оценки
# Изначльна нужно загрузить из файла csv при создании экземляра класса - можно путь указывать.
# Какойто-то студент загружается, мы передаём в качестве аргумента ссылку на csv.
#     Он содаёт экземпляр класса с данными предметами.
#     Оценки можем добавить при инициализации.


# Дескриптор — это атрибут объекта со «связанным поведением», то есть такой атрибут,
# при доступе к которому его поведение переопределяется методом протокола
# дескриптора. Эти методы __get__, __set__ и __delete__. Если хотя бы один из этих
# методов определен в объекте , то можно сказать что этот метод дескриптор


class Text:
    def __init__(self, param):
        self.param = param

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __set__(self, instance, value):
        if self.param(value):
            setattr(instance, self.param_name, value)
        else:
            raise ValueError(f'Bad {value}')
        
class Student:
    # first_name = Text(str.istitle)  # от дескрптеров
    # last_name = Text(str.isupper)   # от дескрптеров

    def __init__(self, first_name, last_name, age, grade, office):
        self.first_name = first_name # имя ученика
        self.last_name = last_name   # фамилия ученика
        self.age = age               # возраст ученика
        self.grade = grade           # номер класса (от 1 до 11)
        self.office = office         # номер кабинета

    def __repr__(self):
        return f'Student(first name={self.first_name}, last name={self.first_name}, age={self.age}, grade={self.grade}, office={self.office})'

    
std1 = Student('Шурик', 'Адександров', 7, 1, 12)
print(std1)